<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="55" time="2.592" timestamp="2025-10-06T16:20:42.540982+08:00" hostname="HUAWEI-MATEBOOK14-2077"><testcase classname="testcase.BusinessInterface.test_business_scenario.TestEBusinessScenario" name="test_business_scenario[case_info0]" time="0.201" /><testcase classname="testcase.BusinessInterface.test_business_scenario.TestEBusinessScenario" name="test_business_scenario[case_info1]" time="0.079" /><testcase classname="testcase.BusinessInterface.test_business_scenario.TestEBusinessScenario" name="test_business_scenario[case_info2]" time="0.037" /><testcase classname="testcase.BusinessInterface.test_business_scenario.TestEBusinessScenario" name="test_business_scenario[case_info3]" time="0.029" /><testcase classname="testcase.BusinessInterface.test_business_scenario.TestEBusinessScenario" name="test_business_scenario[case_info4]" time="0.030" /><testcase classname="testcase.ProductManager.test_product.TestProduct" name="test_get_product_list[base_info0-testcase0]" time="0.032" /><testcase classname="testcase.ProductManager.test_product.TestProduct" name="test_get_product_list[base_info1-testcase1]" time="0.040" /><testcase classname="testcase.ProductManager.test_product.TestProduct" name="test_get_product_list[base_info2-testcase2]" time="0.029" /><testcase classname="testcase.ProductManager.test_product.TestProduct" name="test_get_product_list[base_info3-testcase3]" time="0.030" /><testcase classname="testcase.ProductManager.test_product.TestProduct" name="test_get_product_list[base_info4-testcase4]" time="0.030" /><testcase classname="testcase.ProductManager.test_product.TestProduct" name="test_get_product_detail[base_info0-testcase0]" time="0.035" /><testcase classname="testcase.ProductManager.test_product.TestProduct" name="test_get_product_detail[base_info1-testcase1]" time="0.039" /><testcase classname="testcase.ProductManager.test_product.TestProduct" name="test_get_product_detail[base_info2-testcase2]" time="0.029" /><testcase classname="testcase.ProductManager.test_product.TestProduct" name="test_get_product_detail[base_info3-testcase3]" time="0.027" /><testcase classname="testcase.ProductManager.test_product.TestProduct" name="test_get_product_detail[base_info4-testcase4]" time="0.030" /><testcase classname="testcase.ProductManager.test_product.TestProduct" name="test_commit_order[base_info0-testcase0]" time="0.033" /><testcase classname="testcase.ProductManager.test_product.TestProduct" name="test_commit_order[base_info1-testcase1]" time="0.027" /><testcase classname="testcase.ProductManager.test_product.TestProduct" name="test_commit_order[base_info2-testcase2]" time="0.028" /><testcase classname="testcase.ProductManager.test_product.TestProduct" name="test_commit_order[base_info3-testcase3]" time="0.017" /><testcase classname="testcase.ProductManager.test_product.TestProduct" name="test_commit_order[base_info4-testcase4]" time="0.041" /><testcase classname="testcase.ProductManager.test_product.TestProduct" name="test_order_pay[base_info0-testcase0]" time="0.044" /><testcase classname="testcase.ProductManager.test_product.TestProduct" name="test_order_pay[base_info1-testcase1]" time="0.028" /><testcase classname="testcase.ProductManager.test_product.TestProduct" name="test_order_pay[base_info2-testcase2]" time="0.028" /><testcase classname="testcase.ProductManager.test_product.TestProduct" name="test_order_pay[base_info3-testcase3]" time="0.029" /><testcase classname="testcase.ProductManager.test_product.TestProduct" name="test_order_pay[base_info4-testcase4]" time="0.030" /><testcase classname="testcase.UserManager.test_user.TestUser" name="test_add_user[base_info0-testcase0]" time="0.031" /><testcase classname="testcase.UserManager.test_user.TestUser" name="test_add_user[base_info1-testcase1]" time="0.029" /><testcase classname="testcase.UserManager.test_user.TestUser" name="test_add_user[base_info2-testcase2]" time="0.030" /><testcase classname="testcase.UserManager.test_user.TestUser" name="test_add_user[base_info3-testcase3]" time="0.030" /><testcase classname="testcase.UserManager.test_user.TestUser" name="test_add_user[base_info4-testcase4]" time="0.016" /><testcase classname="testcase.UserManager.test_user.TestUser" name="test_add_user[base_info5-testcase5]" time="0.020" /><testcase classname="testcase.UserManager.test_user.TestUser" name="test_add_user[base_info6-testcase6]" time="0.039" /><testcase classname="testcase.UserManager.test_user.TestUser" name="test_add_user[base_info7-testcase7]" time="0.030" /><testcase classname="testcase.UserManager.test_user.TestUser" name="test_add_user[base_info8-testcase8]" time="0.028" /><testcase classname="testcase.UserManager.test_user.TestUser" name="test_add_user[base_info9-testcase9]" time="0.027" /><testcase classname="testcase.UserManager.test_user.TestUser" name="test_add_user[base_info10-testcase10]" time="0.028" /><testcase classname="testcase.UserManager.test_user.TestUser" name="test_update_user[base_info0-testcase0]" time="0.014" /><testcase classname="testcase.UserManager.test_user.TestUser" name="test_update_user[base_info1-testcase1]" time="0.029" /><testcase classname="testcase.UserManager.test_user.TestUser" name="test_update_user[base_info2-testcase2]" time="0.015" /><testcase classname="testcase.UserManager.test_user.TestUser" name="test_update_user[base_info3-testcase3]" time="0.014" /><testcase classname="testcase.UserManager.test_user.TestUser" name="test_update_user[base_info4-testcase4]" time="0.028" /><testcase classname="testcase.UserManager.test_user.TestUser" name="test_delete_user[base_info0-testcase0]" time="0.030" /><testcase classname="testcase.UserManager.test_user.TestUser" name="test_delete_user[base_info1-testcase1]" time="0.027" /><testcase classname="testcase.UserManager.test_user.TestUser" name="test_delete_user[base_info2-testcase2]" time="0.030" /><testcase classname="testcase.UserManager.test_user.TestUser" name="test_delete_user[base_info3-testcase3]" time="0.031" /><testcase classname="testcase.UserManager.test_user.TestUser" name="test_delete_user[base_info4-testcase4]" time="0.014" /><testcase classname="testcase.UserManager.test_user.TestUser" name="test_delete_user[base_info5-testcase5]" time="0.016" /><testcase classname="testcase.UserManager.test_user.TestUser" name="test_delete_user[base_info6-testcase6]" time="0.014" /><testcase classname="testcase.UserManager.test_user.TestUser" name="test_delete_user[base_info7-testcase7]" time="0.028" /><testcase classname="testcase.UserManager.test_user.TestUser" name="test_query_user[base_info0-testcase0]" time="0.016" /><testcase classname="testcase.UserManager.test_user.TestUser" name="test_query_user[base_info1-testcase1]" time="0.016"><failure message="AssertionError">self = &lt;test_user.TestUser object at 0x0000025F622053D0&gt;
base_info = {'api_name': '用户查询', 'header': {'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}, 'method': 'POST', 'url': '/dar/user/queryUser'}
testcase = {'case_name': '有效查询用户-不支持的请求方式[GET]', 'method': 'GET', 'params': {'user_id': 123839387391912}, 'validation': [{'contains': {'status_code': 405}}]}

    @allure.story(next(c_id) + "查询用户")
    @pytest.mark.run(order=4)
    @pytest.mark.parametrize('base_info,testcase', get_testcase_yaml("./testcase/UserManager/queryUser.yaml"))
    def test_query_user(self, base_info, testcase):
        allure.dynamic.title(testcase['case_name'])
&gt;       RequestBase().specification_yaml(base_info, testcase)

testcase\UserManager\test_user.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
base\apiutil.py:147: in specification_yaml
    raise e
base\apiutil.py:144: in specification_yaml
    raise e
base\apiutil.py:138: in specification_yaml
    self.asserts.assert_result(validation, res_json, status_code, headers=response_headers)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.assertions.Assertions object at 0x0000025F62380910&gt;
expected = [{'contains': {'status_code': 405}}]
response = {'msg': '用户ID错误', 'msg_code': -1}, status_code = 200
headers = {'Connection': 'close', 'Content-Length': '39', 'Content-Type': 'application/json', 'Date': 'Mon, 06 Oct 2025 08:20:44 GMT', ...}

    def assert_result(self, expected, response, status_code, headers=None):
        """
        断言，通过断言all_flag标记，all_flag==0表示测试通过，否则为失败
        :param expected: 预期结果
        :param response: 实际响应结果
        :param status_code: 响应code码
        :param headers: 响应头信息
        :return:
        """
        all_flag = 0
        try:
            logs.info("yaml文件预期结果：%s" % expected)
            # logs.info("实际结果：%s" % response)
            # all_flag = 0
            for yq in expected:
                for key, value in yq.items():
                    if key == "contains":
                        flag = self.contains_assert(value, response, status_code, headers=headers)
                        all_flag = all_flag + flag
                    elif key == "eq":
                        flag = self.equal_assert(value, response)
                        all_flag = all_flag + flag
                    elif key == 'ne':
                        flag = self.not_equal_assert(value, response)
                        all_flag = all_flag + flag
                    elif key == 'rv':
                        flag = self.assert_response_any(actual_results=response, expected_results=value)
                        all_flag = all_flag + flag
                    elif key == 'db':
                        flag = self.assert_mysql_data(value)
                        all_flag = all_flag + flag
                    else:
                        logs.error("不支持此种断言方式")
    
        except Exception as exceptions:
            logs.error('接口断言异常，请检查yaml预期结果值是否正确填写!')
            raise exceptions
    
        if all_flag == 0:
            logs.info("测试成功")
            assert True
        else:
            logs.error("测试失败")
&gt;           assert False
                   ^^^^^
E           AssertionError

common\assertions.py:256: AssertionError</failure></testcase><testcase classname="testcase.UserManager.test_user.TestUser" name="test_query_user[base_info2-testcase2]" time="0.037" /><testcase classname="testcase.UserManager.test_user.TestUser" name="test_query_user[base_info3-testcase3]" time="0.030" /><testcase classname="testcase.UserManager.test_user.TestUser" name="test_query_user[base_info4-testcase4]" time="0.031" /><testcase classname="testcase.UserManager.test_user.TestUser" name="test_query_user[base_info5-testcase5]" time="0.033" /></testsuite></testsuites>